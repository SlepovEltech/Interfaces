// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/08/2021 10:10:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    i2c-new
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module i2c-new_vlg_sample_tst(
	DATA,
	QUARZ,
	sampler_tx
);
input [7:0] DATA;
input  QUARZ;
output sampler_tx;

reg sample;
time current_time;
always @(DATA or QUARZ)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module i2c-new_vlg_check_tst (
	LED_1,
	LED_2,
	LED_3,
	LED_4,
	LED_5,
	LED_6,
	LED_7,
	LED_8,
	SCK,
	SDA,
	sampler_rx
);
input  LED_1;
input  LED_2;
input  LED_3;
input  LED_4;
input  LED_5;
input  LED_6;
input  LED_7;
input  LED_8;
input  SCK;
input  SDA;
input sampler_rx;

reg  LED_1_expected;
reg  LED_2_expected;
reg  LED_3_expected;
reg  LED_4_expected;
reg  LED_5_expected;
reg  LED_6_expected;
reg  LED_7_expected;
reg  LED_8_expected;
reg  SCK_expected;
reg  SDA_expected;

reg  LED_1_prev;
reg  LED_2_prev;
reg  LED_3_prev;
reg  LED_4_prev;
reg  LED_5_prev;
reg  LED_6_prev;
reg  LED_7_prev;
reg  LED_8_prev;
reg  SCK_prev;
reg  SDA_prev;

reg  SCK_expected_prev;

reg  last_SCK_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	LED_1_prev = LED_1;
	LED_2_prev = LED_2;
	LED_3_prev = LED_3;
	LED_4_prev = LED_4;
	LED_5_prev = LED_5;
	LED_6_prev = LED_6;
	LED_7_prev = LED_7;
	LED_8_prev = LED_8;
	SCK_prev = SCK;
	SDA_prev = SDA;
end

// update expected /o prevs

always @(trigger)
begin
	SCK_expected_prev = SCK_expected;
end



// expected SCK
initial
begin
	SCK_expected = 1'bX;
	SCK_expected = #999000 1'b0;
end 
// generate trigger
always @(LED_1_expected or LED_1 or LED_2_expected or LED_2 or LED_3_expected or LED_3 or LED_4_expected or LED_4 or LED_5_expected or LED_5 or LED_6_expected or LED_6 or LED_7_expected or LED_7 or LED_8_expected or LED_8 or SCK_expected or SCK or SDA_expected or SDA)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected LED_1 = %b | expected LED_2 = %b | expected LED_3 = %b | expected LED_4 = %b | expected LED_5 = %b | expected LED_6 = %b | expected LED_7 = %b | expected LED_8 = %b | expected SCK = %b | expected SDA = %b | ",LED_1_expected_prev,LED_2_expected_prev,LED_3_expected_prev,LED_4_expected_prev,LED_5_expected_prev,LED_6_expected_prev,LED_7_expected_prev,LED_8_expected_prev,SCK_expected_prev,SDA_expected_prev);
	$display("| real LED_1 = %b | real LED_2 = %b | real LED_3 = %b | real LED_4 = %b | real LED_5 = %b | real LED_6 = %b | real LED_7 = %b | real LED_8 = %b | real SCK = %b | real SDA = %b | ",LED_1_prev,LED_2_prev,LED_3_prev,LED_4_prev,LED_5_prev,LED_6_prev,LED_7_prev,LED_8_prev,SCK_prev,SDA_prev);
`endif
	if (
		( SCK_expected_prev !== 1'bx ) && ( SCK_prev !== SCK_expected_prev )
		&& ((SCK_expected_prev !== last_SCK_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SCK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SCK_expected_prev);
		$display ("     Real value = %b", SCK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SCK_exp = SCK_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module i2c-new_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] DATA;
reg QUARZ;
// wires                                               
wire LED_1;
wire LED_2;
wire LED_3;
wire LED_4;
wire LED_5;
wire LED_6;
wire LED_7;
wire LED_8;
wire SCK;
wire SDA;

wire sampler;                             

// assign statements (if any)                          
i2c-new i1 (
// port map - connection between master ports and signals/registers   
	.DATA(DATA),
	.LED_1(LED_1),
	.LED_2(LED_2),
	.LED_3(LED_3),
	.LED_4(LED_4),
	.LED_5(LED_5),
	.LED_6(LED_6),
	.LED_7(LED_7),
	.LED_8(LED_8),
	.QUARZ(QUARZ),
	.SCK(SCK),
	.SDA(SDA)
);
// DATA[ 7 ]
initial
begin
	DATA[7] = 1'b0;
end 
// DATA[ 6 ]
initial
begin
	DATA[6] = 1'b0;
end 
// DATA[ 5 ]
initial
begin
	DATA[5] = 1'b0;
end 
// DATA[ 4 ]
initial
begin
	DATA[4] = 1'b1;
end 
// DATA[ 3 ]
initial
begin
	DATA[3] = 1'b0;
end 
// DATA[ 2 ]
initial
begin
	DATA[2] = 1'b0;
end 
// DATA[ 1 ]
initial
begin
	DATA[1] = 1'b0;
end 
// DATA[ 0 ]
initial
begin
	DATA[0] = 1'b1;
end 

// QUARZ
always
begin
	QUARZ = 1'b0;
	QUARZ = #500 1'b1;
	#500;
end 

i2c-new_vlg_sample_tst tb_sample (
	.DATA(DATA),
	.QUARZ(QUARZ),
	.sampler_tx(sampler)
);

i2c-new_vlg_check_tst tb_out(
	.LED_1(LED_1),
	.LED_2(LED_2),
	.LED_3(LED_3),
	.LED_4(LED_4),
	.LED_5(LED_5),
	.LED_6(LED_6),
	.LED_7(LED_7),
	.LED_8(LED_8),
	.SCK(SCK),
	.SDA(SDA),
	.sampler_rx(sampler)
);
endmodule

